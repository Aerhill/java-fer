package hr.fer.zemris.java.tecaj.hw2;

public class ComplexNumber {

    private double realPart;
    private double imaginaryPart;

    public ComplexNumber(double realPart, double imaginaryPart) {
	this.realPart = realPart;
	this.imaginaryPart = imaginaryPart;
    }

    public static ComplexNumber fromReal(double real) {
	return new ComplexNumber(real, 0.0);
    }

    public static ComplexNumber fromImaginary(double imaginary) {
	return new ComplexNumber(0.0, imaginary);
    }

    public static ComplexNumber fromMagnitudeAndAngle(double magnitude,
	    double angle) {
	return null;
    }

    public static ComplexNumber parse(String s) {
	return null;
    }

    public double getReal() {
	return realPart;
    }

    public double getImaginary() {
	return imaginaryPart;
    }

    public double getMagnitude() {
	return 0.0;
    }

    public double getAngle() {
	return 0.0;
    }

    public ComplexNumber add(ComplexNumber c) {
	double real = this.realPart + c.realPart;
	double imag = this.imaginaryPart + c.imaginaryPart;
	return new ComplexNumber(real, imag);
    }

    public ComplexNumber sub(ComplexNumber c) {
	double real = this.realPart - c.realPart;
	double imag = this.imaginaryPart - c.imaginaryPart;
	return new ComplexNumber(real, imag);
    }

    public ComplexNumber mul(ComplexNumber c) {
	double real = this.realPart * c.realPart - this.imaginaryPart
		* c.imaginaryPart;
	double imag = this.realPart * c.imaginaryPart + this.imaginaryPart
		* c.realPart;
	return new ComplexNumber(real, imag);
    }

    public ComplexNumber div(ComplexNumber c) {
	if (c == null) {
	    throw new IllegalArgumentException();
	}
	double a = c.getReal();
	double b = c.getImaginary();

	if (a == 0.0 && b == 0.0) {
	    throw new IllegalArgumentException("Cannot divide by 0");
	}
	if (Math.abs(a) < Math.abs(b)) {
	    double q = a / b;
	    double denominator = a * q + b;
	    return new ComplexNumber((realPart * q + imaginaryPart)
		    / denominator, (imaginaryPart * q - realPart) / denominator);
	} else {
	    double q = b / a;
	    double denominator = b * q + a;
	    return new ComplexNumber((imaginaryPart * q + realPart)
		    / denominator, (imaginaryPart - realPart * q) / denominator);
	}
    }

    public ComplexNumber pow(int n) {
	return null;
    }

    public ComplexNumber[] root(int n) {
	return null;
    }

    @Override
    public String toString() {
	if (imaginaryPart == 0)
	    return realPart + "";
	if (realPart == 0)
	    return imaginaryPart + "i";
	if (imaginaryPart < 0)
	    return realPart + " - " + (-imaginaryPart) + "i";
	return realPart + " + " + imaginaryPart + "i";
    }

}

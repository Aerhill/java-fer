package hr.fer.zemris.java.custom.scripting.lexer;

import hr.fer.zemris.java.custom.scripting.elems.ElementConstantDouble;
import hr.fer.zemris.java.custom.scripting.elems.ElementConstantInteger;
import hr.fer.zemris.java.custom.scripting.elems.ElementFunction;
import hr.fer.zemris.java.custom.scripting.elems.ElementOperator;
import hr.fer.zemris.java.custom.scripting.elems.ElementString;
import hr.fer.zemris.java.custom.scripting.elems.ElementVariable;

/**
 * 
 * 
 * @author Ante Spajic
 *
 */
public class SmartScriptLexer {

	/**
	 * 
	 */
	private char[] data;
	/**
	 * 
	 */
	private int currentIndex;
	/**
	 * 
	 */
	private SmartScriptLexerState state;
	/**
	 * 
	 */
	private ScriptToken token;

	/**
	 * 
	 * @param text
	 */
	public SmartScriptLexer(String text) {
		if (text == null) {
			throw new IllegalArgumentException("Provided text cannot be null");
		}
		text = text.trim();
		this.data = text.toCharArray();
		this.currentIndex = 0;
		this.state = SmartScriptLexerState.TEXT;
	}

	/**
	 * 
	 * @param state
	 */
	public void setState(SmartScriptLexerState state) {
		if (state == null || !(state instanceof SmartScriptLexerState)) {
			throw new IllegalArgumentException(
					"Invalid state provided, state cannot be: " + state);
		}
		this.state = state;
	}

	/**
	 * 
	 * @return
	 */
	public ScriptToken nextToken() {
		if (token != null && token.getType() == TokenType.EOF) {
			throw new SmartScriptLexerException(
					"No more tokens to be generated.");
		}
		if (currentIndex == data.length) {
			return new ScriptToken(TokenType.EOF, null);
		}

		switch (state) {
		case TEXT:
			token = processText();
			break;
		case TAG:
			token = processTag();
			break;
		}

		return token;
	}

	/**
	 * 
	 * @return
	 */
	private ScriptToken processText() {
		try {
			if (data[currentIndex] == '{' && data[currentIndex + 1] == '$') {
				setState(SmartScriptLexerState.TAG);
				currentIndex += 2;
				token = new ScriptToken(TokenType.TAG, new ElementString("TAG"));
			} else {
				token = textToken();
			}
		} catch (Exception e) {
			throw new SmartScriptLexerException("Invalid opening tag.");
		}

		return token;
	}

	/**
	 * 
	 * @return
	 */
	private ScriptToken processTag() {
		// skip whitespaces
		while (Character.toString(data[currentIndex]).matches("\\s+")
				&& currentIndex < data.length - 1) {
			currentIndex++;
		}
		if (data[currentIndex] == '$' && data[currentIndex + 1] == '}') {
			setState(SmartScriptLexerState.TEXT);
			currentIndex += 2;
			return new ScriptToken(TokenType.TAG, new ElementString("TAG"));
		}

		if (data[currentIndex] == '=' && token.getType() == TokenType.TAG) {
			currentIndex++;
			return new ScriptToken(TokenType.STRING, new ElementString("="));
		} else if (data[currentIndex] == '@') {
			return functionToken();
		} else if (data[currentIndex] == '\"') {
			return stringToken();
		} else if (Character.isLetter(data[currentIndex])) {
			return variableToken();
		} else if (Character.isDigit(data[currentIndex])) {
			return numberToken();
		} else {
			// in case of symbol '-', method will check if there is a number
			// afterwards and treat it as a number
			return symbolToken();
		}
	}

	/**
	 * 
	 * @return
	 */
	private ScriptToken symbolToken() {
		char symbol = data[currentIndex];

		if (symbol == '-' && currentIndex + 1 < data.length
				&& Character.isDigit(data[currentIndex + 1])) {
			return numberToken();
		} else if (symbol == '-' || symbol == '+' || symbol == '*'
				|| symbol == '/' || symbol == '^') {
			return new ScriptToken(TokenType.OPERATOR, new ElementOperator(
					String.valueOf(data[currentIndex++])));
		} else {
			throw new SmartScriptLexerException("Symbol (operator) is invalid.");
		}
	}

	/**
	 * 
	 * @return
	 */
	private ScriptToken numberToken() {
		StringBuilder sb = new StringBuilder();
		if (data[currentIndex] == '-') {
			sb.append(data[currentIndex++]);
		}

		int dotCounter = 0;
		while (currentIndex < data.length
				&& (Character.isDigit(data[currentIndex]) || data[currentIndex] == '.')) {
			if (data[currentIndex] == '.') {
				dotCounter++;
			}
			sb.append(data[currentIndex++]);
		}

		if (dotCounter > 1) {
			throw new SmartScriptLexerException(
					"Watch it with those dots, numbers only contain 1 dot, no more.");
		}
		String value = sb.toString();
		if (value.contains(".")) {
			try {
				return new ScriptToken(TokenType.CONSTANT_DOUBLE,
						new ElementConstantDouble(Double.parseDouble(value)));
			} catch (Exception e) {
				throw new SmartScriptLexerException("Couldnt parse double");
			}
		} else {
			try {
				return new ScriptToken(TokenType.CONSTANT_DOUBLE,
						new ElementConstantInteger(Integer.parseInt(value)));
			} catch (Exception e) {
				throw new SmartScriptLexerException("Couldnt parse integer");
			}
		}

	}

	/**
	 * 
	 * @return
	 */
	private ScriptToken variableToken() {
		if (!Character.isLetter(data[currentIndex])) {
			throw new SmartScriptLexerException(
					"Your variable name is not valid, it is invalid");
		}

		StringBuilder sb = new StringBuilder();
		while ((Character.isLetter(data[currentIndex])
				|| Character.isDigit(data[currentIndex]) || data[currentIndex] == '_')
				&& currentIndex < data.length) {
			sb.append(data[currentIndex++]);
		}

		return new ScriptToken(TokenType.VARIABLE, new ElementVariable(
				sb.toString()));
	}

	/**
	 * 
	 * @return
	 */
	private ScriptToken functionToken() {
		StringBuilder sb = new StringBuilder();
		// skip the '@' sign
		currentIndex++;
		while ((Character.isLetter(data[currentIndex])
				|| Character.isDigit(data[currentIndex]) || data[currentIndex] == '_')
				&& currentIndex < data.length) {
			sb.append(data[currentIndex++]);
		}
		return new ScriptToken(TokenType.FUNCTION, new ElementFunction(
				sb.toString()));
	}

	/**
	 * 
	 * @return
	 */
	private ScriptToken textToken() {
		StringBuilder sb = new StringBuilder();
		while (currentIndex < data.length && data[currentIndex] != '{') {
			// if its not a valid escape sequence throws an exception otherwise
			// it just keeps building
			checkForEscape();
			sb.append(data[currentIndex++]);

		}

		return new ScriptToken(TokenType.TEXT, new ElementString(sb.toString()));
	}

	/**
	 * 
	 * @return
	 */
	private ScriptToken stringToken() {
		StringBuilder sb = new StringBuilder();
		// skip first annotation sign
		currentIndex++;
		while (currentIndex < data.length && data[currentIndex] != '"') {
			// if its not a valid escape sequence throws an exception otherwise
			// it just keeps building
			checkForEscape();
			sb.append(data[currentIndex++]);
		}
		// skip last annotation sign
		currentIndex++;
		return new ScriptToken(TokenType.STRING, new ElementString(
				sb.toString()));
	}

	/**
	 * 
	 * @return
	 */
	private void checkForEscape() {
		if (currentIndex + 1 >= data.length) {
			throw new SmartScriptLexerException(
					"Invalid escape sequence. Sequence out of bounds.");
		}
		if (data[currentIndex] != '\\') {
			return;
		}
		char next = data[currentIndex + 1];
		currentIndex++;
		switch (state) {
		case TEXT:
			if (next == '\n' || next == '\r' || next == '\t' || next == '"'
					|| next == '\\' || next == '{') {
				return;
			}
		case TAG:
			if (next == '\\' || next == '"' || next == '\r' || next == '\n'
					|| next == '\t') {
				return;
			}
		default:
			throw new SmartScriptLexerException(
					"You provided invalid escape sequence cannot lex the text ");
		}
	}

}

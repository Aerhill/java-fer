package hr.fer.zemris.java.custom.collections.demo;

import hr.fer.zemris.java.custom.collections.ObjectStack;

/**
 * Demonstration program for my implementation of <link>ObjectStack</link>
 * class. This program accepts one command line argument surrounded with
 * quotation marks which is then further evaluated in the program.
 * 
 * @author Ante Spajic
 *
 */
public class StackDemo {

    /**
     * Entry point to the program
     * 
     * @param args
     *            1 command line argument which consists of multiple elements
     *            that need to be split up for this program to work properly.
     */
    public static void main(String[] args) {

	String[] argumenti = args[0].split(" +");

	ObjectStack stack = new ObjectStack();
	int n = argumenti.length-1;
	for (int i = 0; i < argumenti.length; i++) {
	    System.out.println(argumenti[0]);
	}
	/*
	for (int i = 0; i < argumenti.length; i++) {
	    if (argumenti[i].equals("%") || argumenti[i].equals("/")
		    || argumenti[i].equals("*") || argumenti[i].equals("+")
		    || argumenti[i].equals("-")) {
		if (stack.size() >= 2) {
		    int first = (int) stack.pop();
		    int second = (int) stack.pop();
		    performOperation(first, second, argumenti[i].charAt(0),
			    stack);
		} else {
		    System.err
			    .println("Your expression is not valid, there must be at least 2 numbers before an operator");
		    return;
		}
	    } else {
		try {
		    int broj = Integer.parseInt(argumenti[i]);
		    stack.push(broj);
		} catch (NumberFormatException e) {
		    System.err.println("Your expression is not valid");
		    return;
		}
	    }
	}

	if (stack.size() != 1) {
	    System.err.println("Evaluation error");
	} else {
	    System.out.println("Expression evaluates to " + stack.pop());
	}
	*/
    }

    private static void performOperation(int firstOperand, int secondOperand,
	    char operator, ObjectStack stack) {
	switch (operator) {
	case '%':
	    stack.push(secondOperand % firstOperand);
	    break;
	case '/':
	    stack.push(secondOperand / firstOperand);
	    break;
	case '*':
	    stack.push(firstOperand * secondOperand);
	    break;
	case '+':
	    stack.push(firstOperand + secondOperand);
	    break;
	case '-':
	    stack.push(firstOperand - secondOperand);
	    break;
	}

    }
}

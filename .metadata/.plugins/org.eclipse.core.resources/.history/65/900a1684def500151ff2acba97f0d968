package hr.fer.zemris.java.hw3;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;

import hr.fer.zemris.java.custom.scripting.elems.Element;
import hr.fer.zemris.java.custom.scripting.elems.ElementConstantDouble;
import hr.fer.zemris.java.custom.scripting.elems.ElementConstantInteger;
import hr.fer.zemris.java.custom.scripting.elems.ElementFunction;
import hr.fer.zemris.java.custom.scripting.elems.ElementOperator;
import hr.fer.zemris.java.custom.scripting.elems.ElementString;
import hr.fer.zemris.java.custom.scripting.elems.ElementVariable;
import hr.fer.zemris.java.custom.scripting.nodes.DocumentNode;
import hr.fer.zemris.java.custom.scripting.nodes.EchoNode;
import hr.fer.zemris.java.custom.scripting.nodes.ForLoopNode;
import hr.fer.zemris.java.custom.scripting.nodes.Node;
import hr.fer.zemris.java.custom.scripting.nodes.TextNode;
import hr.fer.zemris.java.custom.scripting.parser.SmartScriptParser;

/**
 * Razred vrsi provjeru funkcionalnosti razreda <code>SmartScriptParser</code> i
 * <code>SmartScriptLexer</code>. Razred takoder implementira staticku metodu
 * koja pruza uslugu obnove izvornog teksta dokumenta iz sintaksnog stabla
 * nastalog sintaksnom analizom dokumenta.
 * 
 * @author Hrvoje Bušić
 *
 */
public class SmartScriptTester {

	/**
	 * Metoda koja se poziva pri pokretanju programa.
	 * 
	 * @param args
	 *            putanja do datoteke s testnim primjerima za provjeru rada
	 *            razreda <code>SmartScriptParser</code>
	 */
	public static void main(String[] args) {

		String docBody = "This is sample text.\\r\\n {$FOR a2 1 10a $} \\r\\n  This is {$=i$}-th time this message is generated.\\r\\n {$END$}\\r\\n {$FOR i 0  10  2   $}\\r\\n sin({$=i$}^2) = {$ab i i * @sin \"0.000\" @decfmt$}\\r\\n {$END$}";

		/*
		 * String ulaz =
		 * " FOR i 1 10 1  i END  i i * @sin \"0.000\" @decfmt 0.12 -2 "; String
		 * ulaz2 =
		 * " ^ 5 \"an\\\\te\" * / + -0.2 - 1 -2.0 5 0.12 -1 -0.57 @sin END \"te\\\"st\""
		 * ; String ulaz3 = "i i * @sin \"0.000\" @decfmt"; String ulaz4 =
		 * "This is sample text. {$ FOR i 1 10 1 $} This is {$ i $} -th time this message is generated."
		 * ; String ulaz5 =
		 * "This is sample text. {$FOR i 1 10 1$} This is {$=i$}-th time this message is generated. {$END$} {$FOR i 0  10  2   $} sin({$=i$}^2) = {$= i i * @sin \"0.000\" @decfmt$} {$END$}"
		 * ; String ulaz6 = "Example \\{$=1$}. Now actually write one {$=1$}";
		 */

		/*
		 * SmartScriptLexer lexer = new SmartScriptLexer(docBody); SmartToken
		 * temp = lexer.nextToken(); while
		 * (!temp.getType().equals(SmartTokenType.EOF)) {
		 * System.out.println(temp); temp = lexer.nextToken(); }
		 */

		SmartScriptParser parser = new SmartScriptParser(docBody);
		DocumentNode document = parser.getDocumentNode();
		String originalDocumentBody = createOriginalDocumentBody(document);
		SmartScriptParser parser2 = new SmartScriptParser(originalDocumentBody);
		DocumentNode document2 = parser2.getDocumentNode();
		String originalDocumentBody2 = createOriginalDocumentBody(document2);

		// now document and
		// document2 should be structurally identical trees

		String filepath = args[0];
		String docBody3 = null;
		try {
			docBody3 = new String(Files.readAllBytes(Paths.get(filepath)), StandardCharsets.UTF_8);
		} catch (IOException e) {
			e.printStackTrace();
		}
		SmartScriptParser parser3 = new SmartScriptParser(docBody3);
		DocumentNode document3 = parser3.getDocumentNode();
		String originalDocumentBody3 = createOriginalDocumentBody(document3);
		System.out.println(originalDocumentBody3);

	}

	/**
	 * Javna staticka metoda vrsi obnovu (ekstrakciju) izvornog teksta na
	 * temelju vrsnog cvora dokumeta (primjerak razreda <code>Node</code>).
	 * Metoda rekurzivno obilazi sve elemente stabla grade dokumenta, te ih
	 * sukladno ugovorenim pravilima sintaksne obrade ispisuje.
	 * 
	 * @param document
	 *            dokument ciji se tekst ekstraktira
	 * @return tekst dokumenta kao objekt tipa <code>String</code>
	 * @throws IllegalArgumentException
	 *             ako je referenca predana kao cvor dokumenta <code>null</code>
	 *             vrijednost
	 */
	public static String createOriginalDocumentBody(Node document) {
		if (document == null) {
			throw new IllegalArgumentException("Value given can not be null.");
		}

		int numberOfChildren = document.numberOfChildren();
		StringBuilder sb = new StringBuilder();
		nodeConsumer(document, sb);
		if (numberOfChildren != 0) {
			for (int i = 0; i < numberOfChildren; i++) {
				sb.append(createOriginalDocumentBody(document.getChild(i)));
			}
		}
		if (document instanceof ForLoopNode) {
			sb.append("{$END$} ");
		}
		return sb.toString();
	}

	/**
	 * Privatna staticka metoda "pomagac" koja obraduje objekte tipa
	 * <code>Node</code> te vrsi njihov ispravan ispis u stream StringBuilder-a.
	 * Metoda ce se pobrinuti da cvorovi koji posjeduju karakteristicnu gradu
	 * (svojstvenu svom razredu) potrebnu za pravilno razumijevanje od strane
	 * sintaktickog analizatora, tu gradu i zadrze nakon ekstrakcije izvornog
	 * teksta.
	 * 
	 * @param node
	 *            cvor koji se obraduje
	 * @param sb
	 *            stream za ispis
	 * @throws IllegalArgumentException
	 *             ako je barem jedan od predanih argumenata <code>null</code>
	 *             vrijednost
	 */
	private static void nodeConsumer(Node node, StringBuilder sb) {
		if (node == null || sb == null) {
			throw new IllegalArgumentException("Value given can not be null.");
		}

		// Text Node
		if (node instanceof TextNode) {
			sb.append(((TextNode) node).getText());
			// Echo Node
		} else if (node instanceof EchoNode) {
			sb.append("{$ = ");
			if (((EchoNode) node).getElements() != null) {
				Element[] elements = ((EchoNode) node).getElements();
				for (int i = 0; i < elements.length; i++) {
					elementConsumer(elements[i], sb);
					sb.append(" ");
				}
			}
			sb.append(" $}");
			// ForLoop Node
		} else if (node instanceof ForLoopNode) {
			ForLoopNode loop = ((ForLoopNode) node);
			sb.append("{$ FOR ");
			elementConsumer(loop.getVariable(), sb);
			sb.append(" ");
			elementConsumer(loop.getStartExpression(), sb);
			sb.append(" ");
			elementConsumer(loop.getEndExpression(), sb);
			sb.append(" ");
			if (loop.getStepExpression() != null) {
				elementConsumer(loop.getStepExpression(), sb);
			}
			sb.append(" $}");
		}
	}

	/**
	 * Privatna staticka metoda "pomagac" koja obraduje objekte tipa
	 * <code>Element</code> te vrsi njihov ispravan ispis u stream
	 * StringBuilder-a. Metoda ce se pobrinuti da elementi koji posjeduju
	 * specificne karakteristike (svojstvene svom razredu) potrebne za pravilno
	 * razumijevanje od strane leksickog analizatora, te karakteristike zadrze i
	 * nakon ekstrakcije izvornog teksta.
	 * 
	 * @param element
	 *            element koji se obraduje
	 * @param sb
	 *            stream za ispis
	 * @throws IllegalArgumentException
	 *             ako je barem jedan od predanih argumenata <code>null</code>
	 *             vrijednost
	 */
	private static void elementConsumer(Element element, StringBuilder sb) {
		if (element == null || sb == null) {
			throw new IllegalArgumentException("Value given can not be null.");
		}

		if (element instanceof ElementVariable || element instanceof ElementOperator
				|| element instanceof ElementConstantInteger || element instanceof ElementConstantDouble) {
			sb.append(element.asText());
		} else if (element instanceof ElementFunction) {
			sb.append("@" + element.asText());
		} else if (element instanceof ElementString) {
			sb.append("\"" + element.asText() + "\"");
		}
	}
}

package hr.fer.zemris.java.custom.collections;

public class Collection {

    /**
     * Default empty constructor
     */
    protected Collection() {

    }

    /**
     * Returns <tt>true</tt> if this collection contains no elements.
     *
     * @return <tt>true</tt> if this collection contains no elements
     */
    public boolean isEmpty() {
	return true;
    }

    /**
     * Returns the number of elements in this collection. If this collection
     * contains more than <tt>Integer.MAX_VALUE</tt> elements, returns
     * <tt>Integer.MAX_VALUE</tt>.
     *
     * @return the number of elements in this collection
     */
    public int size() {
	return 0;
    }

    public void add(Object value) {

    }

    /**
     * Returns <tt>true</tt> if this collection contains the specified element.
     * More formally, returns <tt>true</tt> if and only if this collection
     * contains at least one element such that it meets that objects equality
     * conditions.
     *
     * @param value
     *            element whose presence in this collection is to be tested
     * @return <tt>true</tt> if this collection contains the specified element
     * @throws NullPointerException
     *             if the specified element is null and this collection does not
     *             permit null elements
     */
    public boolean contains(Object value) {
	return false;
    }

    public boolean remove(Object value) {
	return false;
    }

    public Object[] toArray() {
	return null;
    }

    public void forEach(Processor processor) {

    }

    public void addAll(Collection other) {
	Processor procesor = new Processor() {
	    @Override
	    public void process(Object value) {
		Collection.this.add(value);
	    }
	};
	other.forEach(procesor);
    }

    public void clear() {

    }
}

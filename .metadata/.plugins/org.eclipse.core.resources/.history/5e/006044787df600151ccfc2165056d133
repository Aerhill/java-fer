package hr.fer.zemris.java.hw3;

import hr.fer.zemris.java.custom.scripting.nodes.DocumentNode;
import hr.fer.zemris.java.custom.scripting.nodes.ForLoopNode;
import hr.fer.zemris.java.custom.scripting.nodes.Node;
import hr.fer.zemris.java.custom.scripting.nodes.TextNode;
import hr.fer.zemris.java.custom.scripting.parser.SmartScriptParser;
import hr.fer.zemris.java.custom.scripting.parser.SmartScriptParserException;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;

public class SmartScriptTester {

	@SuppressWarnings("unused")
	public static void main(String[] args) {

		String docBody = "";

		// System.out.println(docBody);
		SmartScriptParser parser = new SmartScriptParser(docBody);
		DocumentNode document = parser.getDocumentNode();
		String originalDocumentBody = createOriginalDocumentBody(document);
		// System.out.println(originalDocumentBody);
		SmartScriptParser parser2 = new SmartScriptParser(originalDocumentBody);
		DocumentNode document2 = parser2.getDocumentNode();
		String originalDocumentBody2 = createOriginalDocumentBody(document2);
		// System.out.println(originalDocumentBody2);

		// now document and
		// document2 should be structurally identical trees

		String filepath = args[0];
		String docBody3 = null;
		try {
			docBody3 = new String(Files.readAllBytes(Paths.get(filepath)),
					StandardCharsets.UTF_8);
		} catch (IOException e) {
			e.printStackTrace();
		}
		// System.out.println(docBody3);
		SmartScriptParser parser3 = null;
		try {
			parser3 = new SmartScriptParser(docBody3);
		} catch (SmartScriptParserException e) {
			System.out.println("Unable to parse document!" + e.getMessage());
			System.exit(-1);
		} catch (Exception e) {
			System.out
					.println("If this line ever executes, you have failed this class!");
			System.exit(-1);
		}
		
		DocumentNode document3 = parser3.getDocumentNode();
		String originalDocumentBody3 = createOriginalDocumentBody(document3);
		System.out.println(originalDocumentBody3);

	}

	public static String createOriginalDocumentBody(Node document) {
		if (document == null) {
			throw new IllegalArgumentException("Value given can not be null.");
		}

		int numberOfChildren = document.numberOfChildren();
		StringBuilder sb = new StringBuilder();
		if (document instanceof TextNode) {
			sb.append(((TextNode) document).getText());
		} else {
			sb.append(document.asText());
		}
		if (numberOfChildren != 0) {
			for (int i = 0; i < numberOfChildren; i++) {
				sb.append(createOriginalDocumentBody(document.getChild(i)));
			}
		}
		if (document instanceof ForLoopNode) {
			sb.append("{$END$}");
		}
		return sb.toString();
	}

}